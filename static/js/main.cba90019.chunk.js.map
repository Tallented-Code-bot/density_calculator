{"version":3,"sources":["Calculator.js","App.js","index.js"],"names":["Calculator","useState","mass","setMass","volume","setVolume","density","setDensity","massUnit","setMassUnit","volumeUnit","setVolumeUnit","densityMassUnit","setDensityMassUnit","densityVolumeUnit","setDensityVolumeUnit","convertMass","input","inUnit","outUnit","units","kg","g","mg","convertVolume","mL","cm3","m3","L","convertDensity","massInput","volumeInput","massInUnit","volumeInUnit","massOutUnit","volumeOutUnit","extractNumbers","parsed","parseFloat","isNaN","onSubmit","e","preventDefault","className","type","value","onChange","target","onClick","densityInUnits","massInUnits","volumeInUnits","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cba90019.chunk.js","sourcesContent":["import React from \"react\"\nimport {useState,useEffect} from \"react\"\nimport MassSelector from \"./MassSelector\";\nimport VolumeSelector from \"./VolumeSelector\";\n\n\nconst Calculator=()=>{\n  const [mass,setMass]=useState(0); \n  const [volume,setVolume]=useState(0)\n  const [density,setDensity]=useState(0)\n\n  const [massUnit,setMassUnit]=useState(\"g\");\n  const [volumeUnit,setVolumeUnit]=useState(\"mL\");\n  const [densityMassUnit,setDensityMassUnit]=useState(\"g\");\n  const [densityVolumeUnit,setDensityVolumeUnit]=useState(\"mL\");\n\n\n  const [lastEdited,setLastEdited]=useState([\"mass\",\"volume\",\"density\"]);\n\n\n  function convertMass(input,inUnit,outUnit){\n    //each unit in mg\n    let units={kg:1000000,g:1000,mg:1};\n\n    //convert to mg\n    let inMg=input*units[inUnit]; \n\n    //convert from mg to output unit\n    let output=inMg/units[outUnit];\n    return output;\n  }\n\n  function convertVolume(input,inUnit,outUnit){\n    //all in mL\n    let units={mL:1,cm3:1,m3:1000000,L:1000};\n\n    let inMl=input*units[inUnit];\n\n    let output=inMl/units[outUnit];\n    return output;\n  }\n\n\n  function convertDensity(massInput,volumeInput,massInUnit,volumeInUnit,massOutUnit,volumeOutUnit){\n    let convertedMass=convertMass(massInput,massInUnit,massOutUnit);\n    let convertedVolume=convertVolume(volumeInput,volumeInUnit,volumeOutUnit);\n    return convertedMass/convertedVolume;\n  }\n\n\n\n\n  const editMass=(e)=>{\n    setMass(e.target.value);\n    //updateLastEdited(\"mass\");\n    //calculateValues()\n  }\n\n  const editVolume=(e)=>{\n    setVolume(e.target.value);\n    //updateLastEdited(\"volume\");\n    //calculateValues()\n  }\n\n  const editDensity=(e)=>{\n    setDensity(e.target.value);\n  }\n\n  \n  // useEffect(()=>{\n  //   updateLastEdited(\"density\");\n  //   calculateValues()\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // },[density])\n\n\n  // useEffect(()=>{\n  //   updateLastEdited(\"mass\");\n  //   calculateValues();\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // },[mass])\n\n\n  // useEffect(()=>{\n  //   updateLastEdited(\"volume\");\n  //   calculateValues();\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // },[volume])\n\n\n\n\n\n\n  function calculateValues(){\n    //extract input\n    let massNum=extractNumbers(mass)\n    let volumeNum=extractNumbers(volume)\n    let densityNum=extractNumbers(volume)\n\n    switch(lastEdited[0]){\n      default: return;\n      case \"density\": setDensity(massNum/volumeNum);break; \n      case \"mass\": setMass(densityNum*volumeNum);break;\n      case \"volume\":setVolume(massNum/densityNum);break;\n    }\n\n\n    setDensity(massNum+volumeNum);\n\n\n  }\n\n\n  function calculateDensity(){\n    // mass/volume=density\n    \n    //get mass in proper units\n    let massInUnits=convertMass(extractNumbers(mass),massUnit,densityMassUnit);\n    let volumeInUnits=convertVolume(extractNumbers(volume),volumeUnit,densityVolumeUnit);\n    setDensity(massInUnits/volumeInUnits);\n  }\n\n  function calculateVolume(){\n    // mass/density=volume\n\n    //let massInUnits=convertMass(extractNumbers(mass),massUnit);\n    //convert the density to the proper units\n    let densityInUnits=convertDensity(extractNumbers(density),1,densityMassUnit,densityVolumeUnit,massUnit,volumeUnit);\n\n    setVolume(extractNumbers(mass)/densityInUnits);\n  }\n\n\n  function calculateMass(){\n    //mass=volume*density\n    //\n\n    let densityInUnits=convertDensity(extractNumbers(density),1,densityMassUnit,densityVolumeUnit,massUnit,volumeUnit);\n\n\n\n    setMass(extractNumbers(volume)*densityInUnits);\n  }\n\n\n  const extractNumbers=(input)=>{\n    //this is a simple function\n    //to extract numbers from a text input\n\n    let parsed=parseFloat(input)\n    if(isNaN(parsed)){\n      parsed=0\n    }\n\n    return parsed\n  }\n\n\n  const updateLastEdited=(input)=>{\n    //if the last item of the list is alreay\n    //what we want it to be, return\n    if(lastEdited.at(-1)===input)return\n\n    //get the list so we can edit it\n    let lastEditedTemp=lastEdited;\n    //push the input to the end\n    lastEditedTemp.push(input) \n    //if the list is too long, make it shorter\n    if (lastEditedTemp.length>3){\n      lastEditedTemp.shift()\n    }\n    //set the real list from the temp list\n    setLastEdited(lastEditedTemp)\n  }\n\n  return (\n    <form onSubmit={(e)=>{e.preventDefault();}}>\n      <div className=\"inputLine\">\n        <label>Mass:</label>\n        <input type=\"text\" value={mass} onChange={editMass}/>\n\n        <select value={massUnit} onChange={(e)=>{setMassUnit(e.target.value)}}> \n          <option value=\"kg\">kg</option>\n          <option value=\"g\">g</option>\n          <option value=\"mg\">mg</option>\n        </select>\n\n        <button onClick={calculateMass}>Calculate</button><br/>\n      </div>\n\n\n\n    <div className=\"inputLine\">\n        <label>Volume:</label>\n        <input type=\"text\" value={volume} onChange={editVolume}/>\n        \n        <select value={volumeUnit} onChange={(e)=>{setVolumeUnit(e.target.value)}}>\n          <option value=\"mL\">mL</option>\n          <option value=\"L\">L</option>\n          <option value=\"cm3\">cm&sup3;</option>\n          <option value=\"m3\">m&sup3;</option>\n        </select>\n\n        <button onClick={calculateVolume}>Calculate</button><br/>\n    </div>\n\n\n\n      <div className=\"inputLine\">\n        <label>Density:</label>\n        <input type=\"text\" value={density} onChange={editDensity}/>\n        <select value={densityMassUnit} onChange={(e)=>{setDensityMassUnit(e.target.value)}}>\n          <option value=\"kg\">kg</option>\n          <option value=\"g\">g</option>\n          <option value=\"mg\">mg</option>\n        </select>/\n        \n\n        <select value={densityVolumeUnit} onChange={(e)=>{setDensityVolumeUnit(e.target.value)}}>\n          <option value=\"mL\">mL</option>\n          <option value=\"L\">L</option>\n          <option value=\"cm3\">cm&sup3;</option>\n          <option value=\"m3\">m&sup3;</option>\n        </select>\n\n\n        <button onClick={calculateDensity}>Calculate</button><br/>\n      </div>\n\n\n    </form>\n  )\n  \n}\n\nexport default Calculator\n","import './App.css';\nimport Calculator from \"./Calculator\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Density Calculator</h1>\n      <div className=\"instructions\">\n        <h3>Instructions:</h3>\n        <p>Enter two known values, select the right units, and then click the calculate button\n        for the unknown value.</p>\n      </div>\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}